//
//  AsciiTable.swift
//  LearnASCII
//
//  Created by Dinh Quang Hieu on 3/25/17.
//  Copyright Â© 2017 Dinh Quang Hieu. All rights reserved.
//

import UIKit

enum AsciiSystem: String {
    case hex    = "hexadecimal"
    case oct    = "octal"
    case bin    = "binary"
    case dec    = "decimal"
    case char   = "char"
}

class AsciiTable: NSObject {
    static let shared = AsciiTable()
    
    private var hex:[String] = []
    private var char:[String] = []
    private var binary:[String] = []
    private var octa:[String] = []
    private var decimal:[String] = []
    
    public var count: Int {
        get {
            return char.count
        }
    }
    
    override init() {
        super.init()
        char.append("[SPACE]")
        char.append("!")
        char.append("\"")
        char.append("#")
        char.append("$")
        char.append("%")
        char.append("&")
        char.append("'")
        char.append("(")
        char.append(")")
        char.append("*")
        char.append("+")
        char.append(",")
        char.append("-")
        char.append(".")
        char.append("/")
        char.append("0")
        char.append("1")
        char.append("2")
        char.append("3")
        char.append("4")
        char.append("5")
        char.append("6")
        char.append("7")
        char.append("8")
        char.append("9")
        char.append(":")
        char.append(";")
        char.append("<")
        char.append("=")
        char.append(">")
        char.append("?")
        char.append("@")
        char.append("A")
        char.append("B")
        char.append("C")
        char.append("D")
        char.append("E")
        char.append("F")
        char.append("G")
        char.append("H")
        char.append("I")
        char.append("J")
        char.append("K")
        char.append("L")
        char.append("M")
        char.append("N")
        char.append("O")
        char.append("P")
        char.append("Q")
        char.append("R")
        char.append("S")
        char.append("T")
        char.append("U")
        char.append("V")
        char.append("W")
        char.append("X")
        char.append("Y")
        char.append("Z")
        char.append("[")
        char.append("\\")
        char.append("]")
        char.append("^")
        char.append("_")
        char.append("`")
        char.append("a")
        char.append("b")
        char.append("c")
        char.append("d")
        char.append("e")
        char.append("f")
        char.append("g")
        char.append("h")
        char.append("i")
        char.append("j")
        char.append("k")
        char.append("l")
        char.append("m")
        char.append("n")
        char.append("o")
        char.append("p")
        char.append("q")
        char.append("r")
        char.append("s")
        char.append("t")
        char.append("u")
        char.append("v")
        char.append("w")
        char.append("x")
        char.append("y")
        char.append("z")
        char.append("{")
        char.append("|")
        char.append("}")
        char.append("~")
        
        hex.append("20")
        hex.append("21")
        hex.append("22")
        hex.append("23")
        hex.append("24")
        hex.append("25")
        hex.append("26")
        hex.append("27")
        hex.append("28")
        hex.append("29")
        hex.append("2A")
        hex.append("2B")
        hex.append("2C")
        hex.append("2D")
        hex.append("2E")
        hex.append("2F")
        hex.append("30")
        hex.append("31")
        hex.append("32")
        hex.append("33")
        hex.append("34")
        hex.append("35")
        hex.append("36")
        hex.append("37")
        hex.append("38")
        hex.append("39")
        hex.append("3A")
        hex.append("3B")
        hex.append("3C")
        hex.append("3D")
        hex.append("3E")
        hex.append("3F")
        hex.append("40")
        hex.append("41")
        hex.append("42")
        hex.append("43")
        hex.append("44")
        hex.append("45")
        hex.append("46")
        hex.append("47")
        hex.append("48")
        hex.append("49")
        hex.append("4A")
        hex.append("4B")
        hex.append("4C")
        hex.append("4D")
        hex.append("4E")
        hex.append("4F")
        hex.append("50")
        hex.append("51")
        hex.append("52")
        hex.append("53")
        hex.append("54")
        hex.append("55")
        hex.append("56")
        hex.append("57")
        hex.append("58")
        hex.append("59")
        hex.append("5A")
        hex.append("5B")
        hex.append("5C")
        hex.append("5D")
        hex.append("5E")
        hex.append("5F")
        hex.append("60")
        hex.append("61")
        hex.append("62")
        hex.append("63")
        hex.append("64")
        hex.append("65")
        hex.append("66")
        hex.append("67")
        hex.append("68")
        hex.append("69")
        hex.append("6A")
        hex.append("6B")
        hex.append("6C")
        hex.append("6D")
        hex.append("6E")
        hex.append("6F")
        hex.append("70")
        hex.append("71")
        hex.append("72")
        hex.append("73")
        hex.append("74")
        hex.append("75")
        hex.append("76")
        hex.append("77")
        hex.append("78")
        hex.append("79")
        hex.append("7A")
        hex.append("7B")
        hex.append("7C")
        hex.append("7D")
        hex.append("7E")
        
        octa.append("40")
        octa.append("41")
        octa.append("42")
        octa.append("43")
        octa.append("44")
        octa.append("45")
        octa.append("46")
        octa.append("47")
        octa.append("50")
        octa.append("51")
        octa.append("52")
        octa.append("53")
        octa.append("54")
        octa.append("55")
        octa.append("56")
        octa.append("57")
        octa.append("60")
        octa.append("61")
        octa.append("62")
        octa.append("63")
        octa.append("64")
        octa.append("65")
        octa.append("66")
        octa.append("67")
        octa.append("70")
        octa.append("71")
        octa.append("72")
        octa.append("73")
        octa.append("74")
        octa.append("75")
        octa.append("76")
        octa.append("77")
        octa.append("100")
        octa.append("101")
        octa.append("102")
        octa.append("103")
        octa.append("104")
        octa.append("105")
        octa.append("106")
        octa.append("107")
        octa.append("110")
        octa.append("111")
        octa.append("112")
        octa.append("113")
        octa.append("114")
        octa.append("115")
        octa.append("116")
        octa.append("117")
        octa.append("120")
        octa.append("121")
        octa.append("122")
        octa.append("123")
        octa.append("123")
        octa.append("125")
        octa.append("126")
        octa.append("127")
        octa.append("130")
        octa.append("131")
        octa.append("132")
        octa.append("133")
        octa.append("134")
        octa.append("135")
        octa.append("136")
        octa.append("137")
        octa.append("140")
        octa.append("141")
        octa.append("142")
        octa.append("143")
        octa.append("144")
        octa.append("145")
        octa.append("146")
        octa.append("147")
        octa.append("150")
        octa.append("151")
        octa.append("152")
        octa.append("153")
        octa.append("154")
        octa.append("155")
        octa.append("156")
        octa.append("157")
        octa.append("160")
        octa.append("161")
        octa.append("162")
        octa.append("163")
        octa.append("164")
        octa.append("165")
        octa.append("166")
        octa.append("167")
        octa.append("170")
        octa.append("171")
        octa.append("172")
        octa.append("173")
        octa.append("174")
        octa.append("175")
        octa.append("176")
        
        binary.append("0010 0000")
        binary.append("0010 0001")
        binary.append("0010 0010")
        binary.append("0010 0011")
        binary.append("0010 0100")
        binary.append("0010 0101")
        binary.append("0010 0110")
        binary.append("0010 0111")
        binary.append("0010 1000")
        binary.append("0010 1001")
        binary.append("0010 1010")
        binary.append("0010 1011")
        binary.append("0010 1100")
        binary.append("0010 1101")
        binary.append("0010 1110")
        binary.append("0010 1111")
        binary.append("0011 0000")
        binary.append("0011 0001")
        binary.append("0011 0010")
        binary.append("0011 0011")
        binary.append("0011 0100")
        binary.append("0011 0101")
        binary.append("0011 0110")
        binary.append("0011 0111")
        binary.append("0011 1000")
        binary.append("0011 1001")
        binary.append("0011 1010")
        binary.append("0011 1011")
        binary.append("0011 1100")
        binary.append("0011 1101")
        binary.append("0011 1110")
        binary.append("0011 1111")
        binary.append("0100 0000")
        binary.append("0100 0001")
        binary.append("0100 0010")
        binary.append("0100 0011")
        binary.append("0100 0100")
        binary.append("0100 0101")
        binary.append("0100 0110")
        binary.append("0100 0111")
        binary.append("0100 1000")
        binary.append("0100 1001")
        binary.append("0100 1010")
        binary.append("0100 1011")
        binary.append("0100 1100")
        binary.append("0100 1101")
        binary.append("0100 1110")
        binary.append("0100 1111")
        binary.append("0101 0000")
        binary.append("0101 0001")
        binary.append("0101 0010")
        binary.append("0101 0011")
        binary.append("0101 0100")
        binary.append("0101 0101")
        binary.append("0101 0110")
        binary.append("0101 0111")
        binary.append("0101 1000")
        binary.append("0101 1001")
        binary.append("0101 1010")
        binary.append("0101 1011")
        binary.append("0101 1100")
        binary.append("0101 1101")
        binary.append("0101 1110")
        binary.append("0101 1111")
        binary.append("0110 0000")
        binary.append("0110 0001")
        binary.append("0110 0010")
        binary.append("0110 0011")
        binary.append("0110 0100")
        binary.append("0110 0101")
        binary.append("0110 0110")
        binary.append("0110 0111")
        binary.append("0110 1000")
        binary.append("0110 1001")
        binary.append("0110 1010")
        binary.append("0110 1011")
        binary.append("0110 1100")
        binary.append("0110 1101")
        binary.append("0110 1110")
        binary.append("0110 1111")
        binary.append("0111 0000")
        binary.append("0111 0001")
        binary.append("0111 0010")
        binary.append("0111 0011")
        binary.append("0111 0100")
        binary.append("0111 0101")
        binary.append("0111 0110")
        binary.append("0111 0111")
        binary.append("0111 1000")
        binary.append("0111 1001")
        binary.append("0111 1010")
        binary.append("0111 1011")
        binary.append("0111 1100")
        binary.append("0111 1101")
        binary.append("0111 1110")
        
        decimal.append("32")
        decimal.append("33")
        decimal.append("34")
        decimal.append("35")
        decimal.append("36")
        decimal.append("37")
        decimal.append("38")
        decimal.append("39")
        decimal.append("40")
        decimal.append("41")
        decimal.append("42")
        decimal.append("43")
        decimal.append("44")
        decimal.append("45")
        decimal.append("46")
        decimal.append("47")
        decimal.append("48")
        decimal.append("49")
        decimal.append("50")
        decimal.append("51")
        decimal.append("52")
        decimal.append("53")
        decimal.append("54")
        decimal.append("55")
        decimal.append("56")
        decimal.append("57")
        decimal.append("58")
        decimal.append("59")
        decimal.append("60")
        decimal.append("61")
        decimal.append("62")
        decimal.append("63")
        decimal.append("64")
        decimal.append("65")
        decimal.append("66")
        decimal.append("67")
        decimal.append("68")
        decimal.append("69")
        decimal.append("70")
        decimal.append("71")
        decimal.append("72")
        decimal.append("73")
        decimal.append("74")
        decimal.append("75")
        decimal.append("76")
        decimal.append("77")
        decimal.append("78")
        decimal.append("79")
        decimal.append("80")
        decimal.append("81")
        decimal.append("82")
        decimal.append("83")
        decimal.append("84")
        decimal.append("85")
        decimal.append("86")
        decimal.append("87")
        decimal.append("88")
        decimal.append("89")
        decimal.append("90")
        decimal.append("91")
        decimal.append("92")
        decimal.append("93")
        decimal.append("94")
        decimal.append("95")
        decimal.append("96")
        decimal.append("97")
        decimal.append("98")
        decimal.append("99")
        decimal.append("100")
        decimal.append("101")
        decimal.append("102")
        decimal.append("103")
        decimal.append("104")
        decimal.append("105")
        decimal.append("106")
        decimal.append("107")
        decimal.append("108")
        decimal.append("109")
        decimal.append("110")
        decimal.append("111")
        decimal.append("112")
        decimal.append("113")
        decimal.append("114")
        decimal.append("115")
        decimal.append("116")
        decimal.append("117")
        decimal.append("118")
        decimal.append("119")
        decimal.append("120")
        decimal.append("121")
        decimal.append("122")
        decimal.append("123")
        decimal.append("124")
        decimal.append("125")
        decimal.append("126")
    }
    
    func get(at position: Int, system: AsciiSystem) -> String {
        switch system {
        case .bin:
            return getBinary(at: position)
        case .oct:
            return getOcta(at: position)
        case .dec:
            return getDecimal(at: position)
        case .hex:
            return getHex(at: position)
        case .char:
            return getChar(at: position)
        }
    }
    
    func getChar(at position: Int) -> String {
        if position < char.count {
            return char[position]
        }
        return ""
    }
    
    func getHex(at position: Int) -> String {
        if position < hex.count {
            return hex[position]
        }
        return ""
    }
    
    func getOcta(at position: Int) -> String {
        if position < octa.count {
            return octa[position]
        }
        return ""
    }
    
    func getBinary(at position: Int) -> String {
        if position < binary.count {
            return binary[position]
        }
        return ""
    }
    
    func getDecimal(at position: Int) -> String {
        if position < decimal.count {
            return decimal[position]
        }
        return ""
    }
    
    func indexOf(char: String) -> Int? {
        return self.char.index(of: char)
    }
}
